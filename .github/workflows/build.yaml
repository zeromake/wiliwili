name: Build wiliwili

on:
  push:
    branches:
      - yoga
      - dev
      - debug
  pull_request:
  workflow_dispatch:
    inputs:
      ssh_darwin:
        description: 'SSH connection to Darwin'
        required: false
        default: 'false'
      ssh_ubuntu:
        description: 'SSH connection to Ubuntu'
        required: false
        default: 'false'
      release:
        description: 'Push a new release'
        required: false
        default: 'false'
      version:
        description: 'Version'
        required: false
        default: '0.0.0'

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.info.outputs.version }}
      standard_version: ${{ steps.info.outputs.standard_version }}
      DIST_EXE: ${{ steps.info.outputs.DIST_EXE }}
      DIST_NRO: ${{ steps.info.outputs.DIST_NRO }}
      DIST_INTEL_DMG: ${{ steps.info.outputs.DIST_INTEL_DMG }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: 'xfangfang/wiliwili'

      - name: Debug version
        run: |
          export VERSION=`git rev-parse --short HEAD`
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Release version
        if: github.event.inputs.release == 'true' && github.event.inputs.release != 'false' && !cancelled()
        run: |
          export VERSION="${{ github.event.inputs.version }}"
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Version
        id: info
        env:
          VERSION: ${{ env.VERSION }}
        run: |
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "DIST_EXE=wiliwili-Windows-x64-${VERSION}" >> $GITHUB_OUTPUT
          echo "DIST_NRO=wiliwili-NintendoSwitch-${VERSION}" >> $GITHUB_OUTPUT
          echo "DIST_INTEL_DMG=wiliwili-macOS-IntelChip-${VERSION}" >> $GITHUB_OUTPUT
          echo $VERSION
          echo "${{  github.event.inputs.version }}"


  release:
    needs: [ build-win-x64, build-switch, build-macos-intel, build-flatpak, version ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v2
        if: github.event.inputs.release == 'true' && github.event.inputs.release != 'false' && !cancelled()

      - name: Version
        if: github.event.inputs.release == 'true' && github.event.inputs.release != 'false' && !cancelled()
        run: |
          echo "DIST_EXE=${{ needs.version.outputs.DIST_EXE }}" >> $GITHUB_ENV
          echo "DIST_NRO=${{ needs.version.outputs.DIST_NRO }}" >> $GITHUB_ENV
          echo "DIST_INTEL_DMG=${{ needs.version.outputs.DIST_INTEL_DMG }}" >> $GITHUB_ENV
          echo "DIST_FLATPAK_x86_64=wiliwili-Linux-${{ needs.version.outputs.version }}-x86_64" >> $GITHUB_ENV
          echo $GITHUB_ENV
          ls -lah

      - name: Upload
        if: github.event.inputs.release == 'true' && github.event.inputs.release != 'false' && !cancelled()
        uses: ncipollo/release-action@v1
        with:
          name: wiliwili ${{  github.event.inputs.version }}
          tag: ${{  github.event.inputs.version }}
          omitBodyDuringUpdate: true
          body: This release is built by github-action.
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: true
          artifacts: >
            ${{ env.DIST_EXE }}/${{ env.DIST_EXE }}.tar.gz
            ${{ env.DIST_NRO }}/${{ env.DIST_NRO }}.tar.gz
            ${{ env.DIST_INTEL_DMG }}/${{ env.DIST_INTEL_DMG }}.dmg
            ${{ env.DIST_FLATPAK_x86_64 }} / ${{ env.DIST_FLATPAK_x86_64 }}.zip


  build-win-x64:
    needs: [ version ]
    runs-on: windows-2022
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: 'xfangfang/wiliwili'
          submodules: 'recursive'
          fetch-depth: 0

      - name: Update gamepad db
        run: |
          cmake -P library/borealis/library/lib/extern/glfw//CMake/GenerateMappings.cmake library/borealis/library/lib/extern/glfw//src/mappings.h.in library/borealis/library/lib/extern/glfw//src/mappings.h

      - name: Install dependency
        uses: msys2/setup-msys2@v2
        with:
          update: true
          install: >-
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-make
            mingw-w64-x86_64-mpv
            git
            p7zip

      - name: Build
        shell: msys2 {0}
        id: compile
        run: |
          VERSION="${{ needs.version.outputs.version }}"
          DIST_EXE="${{ needs.version.outputs.DIST_EXE }}"
          echo ${VERSION} ${DIST_EXE}

          mkdir -p build && pushd build
          cmake .. -G "MinGW Makefiles" -DPLATFORM_DESKTOP=ON -DWIN32_TERMINAL=OFF -DCMAKE_BUILD_TYPE=Release
          mingw32-make wiliwili -j4
          strip wiliwili.exe
          mkdir wiliwili && mv wiliwili.exe wiliwili && mv resources wiliwili
          for i in {libwinpthread-1,libgcc_s_seh-1,zlib1,libssh2-1,libstdc++-6,libcrypto-3-x64}; do
          cp /mingw64/bin/${i}.dll wiliwili
          done
          wget https://github.com/xfangfang/wiliwili/releases/download/v0.1.0/mpv-dev-x86_64-20221204-git-4574dd5.7z -O mpv.7z
          7z e mpv.7z -ompv
          cp mpv/mpv-2.dll wiliwili/libmpv-2.dll
          tar -czvf ../${DIST_EXE}.tar.gz wiliwili
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload dist
        uses: actions/upload-artifact@v3
        if: steps.compile.outputs.status == 'success'
        with:
          name: ${{ needs.version.outputs.DIST_EXE }}
          path: "${{ needs.version.outputs.DIST_EXE }}.tar.gz"

  build-switch:
    needs: [ version ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: 'xfangfang/wiliwili'
          submodules: 'recursive'
          fetch-depth: 0

      - name: Build
        id: compile
        run: |
          VERSION="${{ needs.version.outputs.version }}"
          DIST_NRO="${{ needs.version.outputs.DIST_NRO }}"
          echo ${VERSION} ${DIST_NRO}
          wget https://github.com/xfangfang/wiliwili/releases/download/v0.1.0/nsp_forwarder.nsp -P resources
          docker run --rm -v $(pwd):/data devkitpro/devkita64:latest sh -c "/data/scripts/build_switch.sh"
          cd cmake-build-switch
          tar -czvf ../${DIST_NRO}.tar.gz wiliwili.nro
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload dist
        uses: actions/upload-artifact@v3
        if: steps.compile.outputs.status == 'success'
        with:
          name: ${{ needs.version.outputs.DIST_NRO }}
          path: "${{ needs.version.outputs.DIST_NRO }}.tar.gz"

  build-macos-intel:
    needs: [ version ]
    runs-on: macos-11
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: 'xfangfang/wiliwili'
          submodules: 'recursive'
          fetch-depth: 0

      - name: install deps
        run: |
          brew install create-dmg dylibbundler
          brew tap xfangfang/wiliwili
          brew install -v mpv-wiliwili

      - name: Readme
        run: |
          mkdir -p dist
          echo "wiliwili" > dist/readme.txt
          echo "" >> dist/readme.txt
          echo "if you see any of these after open this application:" >> dist/readme.txt
          echo "1: wiliwili.app is damaged and can't be opened. You should move it to he Trash." >> dist/readme.txt
          echo "2: wiliwili.app can't be opened because it is from an unidentified developer." >> dist/readme.txt
          echo "" >> dist/readme.txt
          echo "Please run this command in your terminal:" >> dist/readme.txt
          echo "sudo xattr -rd com.apple.quarantine /Applications/wiliwili.app" >> dist/readme.txt

      - name: SSH connection to Actions
        uses: P3TERX/ssh2actions@v1.0.0
        if: (github.event.inputs.ssh_darwin == 'true' && github.event.inputs.ssh_darwin  != 'false') || contains(github.event.action, 'ssh_darwin')
        env:
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

      - name: Build
        id: compile
        env:
          VERSION: ${{ needs.version.outputs.version }}
          DIST_INTEL_DMG: ${{ needs.version.outputs.DIST_INTEL_DMG }}
        run: |
          echo $VERSION $DIST_INTEL_DMG

          BRLS_GLFW="library/borealis/library/lib/extern/glfw/"
          cmake -P ${BRLS_GLFW}/CMake/GenerateMappings.cmake  ${BRLS_GLFW}/src/mappings.h.in  ${BRLS_GLFW}/src/mappings.h

          cmake -B build -DPLATFORM_DESKTOP=ON -DCMAKE_BUILD_TYPE=Release
          make -C build wiliwili.app -j$(sysctl -n hw.ncpu)
          mv build/wiliwili.app dist/
          create-dmg --window-pos 200 120 --window-size 800 400 \
            --icon-size 100 --icon "wiliwili.app" 200 190 \
            --icon "readme.txt" 400 100 --hide-extension "wiliwili.app" \
            --app-drop-link 600 185  --volicon ./scripts/mac/dmg.icns \
            --volname "wiliwili (${VERSION})" ${DIST_INTEL_DMG}.dmg "dist/"
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload dist
        uses: actions/upload-artifact@v3
        if: steps.compile.outputs.status == 'success'
        with:
          name: ${{ needs.version.outputs.DIST_INTEL_DMG }}
          path: "${{ needs.version.outputs.DIST_INTEL_DMG }}.dmg"

  build-flatpak:
    needs: [ version ]
    runs-on: ubuntu-latest
    container:
      image: bilelmoussaoui/flatpak-github-actions:freedesktop-22.08
      options: --privileged
    strategy:
      matrix:
        arch: [ x86_64 ]
        # arch: [ x86_64, aarch64 ]
      # Don't fail the whole workflow if one architecture fails
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: 'xfangfang/wiliwili'
          submodules: 'recursive'
          fetch-depth: 0

      - name: Install deps
        run: |
          dnf -y install docker cmake
          BRLS_GLFW="library/borealis/library/lib/extern/glfw/"
          cmake -P ${BRLS_GLFW}/CMake/GenerateMappings.cmake  ${BRLS_GLFW}/src/mappings.h.in  ${BRLS_GLFW}/src/mappings.h

      # - name: Set up QEMU
      #   id: qemu
      #   uses: docker/setup-qemu-action@v2
      #   with:
      #     platforms: arm64
      - uses: flatpak/flatpak-github-actions/flatpak-builder@v4
        with:
          bundle: wiliwili-Linux-${{ needs.version.outputs.version }}.flatpak
          manifest-path: .flatpak-manifest.yml
          cache-key: flatpak-builder-${{ github.sha }}
          arch: ${{ matrix.arch }}
